import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import sqlite3
from aiogram.types import CallbackQuery
from aiogram import Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.methods import GetChatMember
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
from aiogram.types import InputMediaPhoto
from aiogram.fsm.state import State, StatesGroup



from configuration import WELCOME_MESSAGE

API_TOKEN = '7440321214:AAHfytdUiQVj4buqMSHp0dnYvjeoClzsFdQ'
CHANNEL_USERNAME = '@testimshophardy'
CHANNEL_LINK = 'https://t.me/testimshophardy'
YOUTUBE_LINK = 'https://www.youtube.com/@goatyhardy'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –†–æ—É—Ç–µ—Ä
router = Router()

async def is_user_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "creator", "administrator"]
    except:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Blacklist
def get_blacklist_info(user_id: int):
    conn = sqlite3.connect('ravito-bot.db')  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("SELECT reason, ban_date FROM Blacklist WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–†—ã–Ω–æ–∫")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_messages(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Blacklist
    blacklist_info = get_blacklist_info(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if blacklist_info:
        reason, ban_date = blacklist_info
        await message.answer(f"–£–≤—ã, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ RAVITO. –î–∞—Ç–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è: {ban_date}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="done")]
    ])
    await message.answer(WELCOME_MESSAGE, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
@dp.callback_query(lambda c: c.data == "done")
async def confirm_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Blacklist
    blacklist_info = get_blacklist_info(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if blacklist_info:
        reason, ban_date = blacklist_info
        await callback_query.answer(f"–£–≤—ã, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ RAVITO. –î–∞—Ç–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è: {ban_date}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    buttons = [InlineKeyboardButton(text=str(i), callback_data=f"server_{i}") for i in range(1, 22)]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å 7 –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–∞–∂–¥–æ–π
    inline_keyboard = [buttons[i:i + 7] for i in range(0, len(buttons), 7)]  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 7 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–µ—Ä–≤–µ—Ä üñ•Ô∏èüîë", 
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
@dp.callback_query(lambda c: c.data.startswith("server_"))
async def handle_server_selection(callback: CallbackQuery):
    server = callback.data.replace("server_", "")
    telegram_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()

    try:
        cursor.execute("""
            INSERT INTO Users (telegram_id, role, server)
            VALUES (?, 'user', ?)
            ON CONFLICT(telegram_id) DO UPDATE SET server=excluded.server;
        """, (telegram_id, server))
        conn.commit()
    finally:
        conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
    await callback.message.answer(
        f"üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üì± –ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: {telegram_id}\n"
        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {server}\n\n"
        "üöÄ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –Ω–∞ –±–æ—Ä—Ç—É\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ!"

    )
    await callback.answer()
    await callback.message.answer("–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ üëá", reply_markup=get_main_menu())
@router.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    telegram_id = message.from_user.id
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT server FROM Users WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ Obyavy –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT COUNT(*) FROM Obyavy WHERE telegram_id = ?", (telegram_id,))
    ad_count = cursor.fetchone()[0]
    conn.close()

    server = result[0] if result else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    profile_text = (
        f"üéâ –í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üì± –ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: {telegram_id}\n"
        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {server}\n\n"
        "üöÄ –£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üöÄ –ú–æ–∏ –û–±—ä—è–≤–ª–µ–Ω–∏—è: {ad_count}", callback_data="my_ads")]
    ])

    await message.answer(profile_text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "my_ads")
async def show_my_ads(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, vid, tip_tovara, opisanie, server FROM Obyavy WHERE telegram_id = ?", (telegram_id,))
    ads = cursor.fetchall()
    conn.close()

    if ads:
        text = "üì¶ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        for ad in ads:
            text += (f"‚úâÔ∏è‚úâÔ∏è‚úâÔ∏è\n\nüÜî ID: {ad[0]}\nüñ• –°–µ—Ä–≤–µ—Ä: {ad[4]}\n"
                     f"üíº –¢–∏–ø —Å–¥–µ–ª–∫–∏: {ad[1]}\nüì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {ad[2]}\n"
                     f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ad[3]}\n\n")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã", callback_data="delete_choose")]
        ])
        await callback_query.message.answer(text, reply_markup=keyboard)
    else:
        await callback_query.message.answer("üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "delete_choose")
async def choose_post_to_delete(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM Obyavy WHERE telegram_id = ?", (telegram_id,))
    ad_ids = [row[0] for row in cursor.fetchall()]
    conn.close()

    if not ad_ids:
        await callback_query.message.answer("üòï –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏: 4 –≤ —Ä—è–¥
    keyboard_rows = []
    row = []
    for i, ad_id in enumerate(ad_ids, start=1):
        row.append(InlineKeyboardButton(text=str(ad_id), callback_data=f"delete_post_{ad_id}"))
        if i % 4 == 0:
            keyboard_rows.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        keyboard_rows.append(row)

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await callback_query.message.answer("‚ùì –ö–∞–∫–æ–π –ø–æ—Å—Ç –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å?\nüëá –í—ã–±–µ—Ä–∏—Ç–µ ID –ø–æ—Å—Ç–∞:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("delete_post_"))
async def confirm_delete_post(callback_query: CallbackQuery):
    post_id = int(callback_query.data.split("_")[2])

    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT vid, tip_tovara, opisanie, server FROM Obyavy WHERE id = ?", (post_id,))
    post = cursor.fetchone()
    conn.close()

    if not post:
        await callback_query.message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = (
        f"üîç –ü–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        f"üÜî ID: {post_id}\nüñ• –°–µ—Ä–≤–µ—Ä: {post[3]}\n"
        f"üíº –¢–∏–ø —Å–¥–µ–ª–∫–∏: {post[0]}\nüì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {post[1]}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {post[2]}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{post_id}")]
        ]
    )

    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def delete_ad_from_db(callback_query: CallbackQuery):
    post_id = int(callback_query.data.split("_")[2])
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM Obyavy WHERE id = ?", (post_id,))
    conn.commit()
    conn.close()

    await callback_query.message.answer(f"üóë –ü–æ—Å—Ç —Å ID {post_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await callback_query.answer()



@router.message(lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
async def profile_settings(message: Message):
    buttons = [InlineKeyboardButton(text=str(i), callback_data=f"server_{i}") for i in range(1, 22)]
    inline_keyboard = [buttons[i:i + 7] for i in range(0, len(buttons), 7)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–µ—Ä–≤–µ—Ä üñ•Ô∏èüîë", reply_markup=keyboard)


@router.message(lambda message: message.text == "–†—ã–Ω–æ–∫")
async def show_market(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí–ö—É–ø–∏—Ç—å", callback_data="buy")],
        [InlineKeyboardButton(text="üí∞–ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")]
    ])
    await message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å?", reply_markup=keyboard)

from configuration import MARKET_MESSAGE  # –Ω–µ –∑–∞–±—É–¥—å –¥–æ–¥–∞—Ç–∏ —Ü—é –∑–º—ñ–Ω–Ω—É –≤ configuration.py

@dp.callback_query(lambda c: c.data in ["buy", "sell"])
async def handle_market_action(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    if not await is_user_subscribed(bot, user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚ñ∂Ô∏è YouTube", url=YOUTUBE_LINK)]
        ])
        await callback_query.message.answer(MARKET_MESSAGE, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()
        return

    if callback_query.data == "sell":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöó –ê–≤—Ç–æ", callback_data="sell_auto")],
            [InlineKeyboardButton(text="üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä", callback_data="sell_accessory")],
            [InlineKeyboardButton(text="üè† –î–æ–º", callback_data="sell_house")],
            [InlineKeyboardButton(text="üè¢ –ë–∏–∑–Ω–µ—Å", callback_data="sell_business")],
        ])
        await callback_query.message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—à—å –ø—Ä–æ–¥–∞—Ç—å?", reply_markup=keyboard)
    elif callback_query.data == "buy":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöó –ê–≤—Ç–æ", callback_data="buy_auto")],
            [InlineKeyboardButton(text="üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä", callback_data="buy_accessory")],
            [InlineKeyboardButton(text="üè† –î–æ–º", callback_data="buy_house")],
            [InlineKeyboardButton(text="üè¢ –ë–∏–∑–Ω–µ—Å", callback_data="buy_business")]
        ])
        await callback_query.message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—à—å –∫—É–ø–∏—Ç—å? üõçÔ∏è", reply_markup=keyboard)

class SellAutoStates(StatesGroup):
    waiting_for_form = State()
    confirm_telegram = State()
    waiting_for_photo = State()

@dp.callback_query(lambda c: c.data == "sell_auto")
async def start_sell_auto(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–•–æ—Ä–æ—à–æ —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É, –º–æ–∂–µ—Ç –æ–Ω–∞ —Ç–µ–±–µ –∏ –Ω–µ –Ω–∞–¥–∞\n"
        "–ó–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ:\n"
        "1. –ú–∞—Ä–∫–∞ —Ç–≤–æ–µ–≥–æ —á–µ—Ä—Ç–æ–ª–µ—Ç–∞:\n"
        "2. –û–ø–∏—Å–∞–Ω–∏–µ(–°—Ç–µ–π–¥–∂ —Ç—é–Ω–∏–Ω–≥, –≤–∏–Ω–∏–ª, —Ç–æ–Ω–∏—Ä–æ–≤–∫–∞):\n"
        "3. –¶–µ–Ω–∞:\n"
        "4. –ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—Å—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. MBW F90\n"
        "2. –§–¢ –§–ë\n"
        "3. 10.000.000\n"
        "4. –≤ –∏–≥—Ä–µ 999999"
    )
    await state.set_state(SellAutoStates.waiting_for_form)

@router.message(SellAutoStates.waiting_for_form)
async def receive_form(message: Message, state: FSMContext):
    await state.update_data(form_text=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_telegram_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_telegram_no")]
    ])
    await message.answer(
        f"–¢–≤–æ—ë –æ–±—å—è–≤–ª–µ–Ω–∏–µ\n{message.text}\n–ñ–µ–ª–∞–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–≤—è–∑–∏ —Å —Ç–æ–±–æ–π?",
        reply_markup=keyboard
    )
    await state.set_state(SellAutoStates.confirm_telegram)
@dp.callback_query(lambda c: c.data in ["add_telegram_yes", "add_telegram_no"])
async def handle_telegram_add(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    form_text = data["form_text"]

    telegram_username = callback_query.from_user.username
    if callback_query.data == "add_telegram_yes" and telegram_username:
        form_text += f"\n5. –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ–¥–∞–≤—Ü–∞: @{telegram_username}"

    await state.update_data(form_text=form_text, telegram_username=telegram_username if callback_query.data == "add_telegram_yes" else None)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_photo_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_photo_no")]
    ])
    await callback_query.message.answer(
        f"{form_text}\n\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=keyboard
    )
    await state.set_state(SellAutoStates.waiting_for_photo)

@dp.callback_query(lambda c: c.data in ["add_photo_yes", "add_photo_no"])
async def handle_photo_option(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "add_photo_yes":
        await callback_query.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ üëá")
    else:
        await save_to_database(callback_query, state, photo_url=None)
        await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚úÖ")
        await state.clear()

@router.message(SellAutoStates.waiting_for_photo)
async def receive_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()
    photos = data.get("photos", [])

    photo = message.photo[-1]
    photos.append(photo.file_id)
    await state.update_data(photos=photos)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_uploading_photos")]
    ])
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë ‚Äî –ø—Ä–∏—à–ª–∏ –∏—Ö. –ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "finish_uploading_photos")
async def finish_photo_upload(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photo_urls = ",".join(photos) if photos else None

    await save_to_database(callback_query, state, photo_urls)
    await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
    await state.clear()

class SellAccessoryStates(StatesGroup):
    waiting_for_form = State()
    confirm_telegram = State()
    waiting_for_photo = State()

class AdsBrowsing(StatesGroup):
    ads = State()
    index = State()

@dp.callback_query(lambda c: c.data == "sell_accessory")
async def start_sell_accessory(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–¥–∞—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä!\n"
        "–ó–∞–ø–æ–ª–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º—É:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞:\n"
        "2. –û–ø–∏—Å–∞–Ω–∏–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏):\n"
        "3. –¶–µ–Ω–∞:\n"
        "4. –ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –ö–æ–∂–∞–Ω–∞—è –∫—É—Ä—Ç–∫–∞\n"
        "2. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä M\n"
        "3. 5.000\n"
        "4. —Ç–µ–ª. 123456789"
    )
    await state.set_state(SellAccessoryStates.waiting_for_form)

@router.message(SellAccessoryStates.waiting_for_form)
async def receive_form_accessory(message: Message, state: FSMContext):
    await state.update_data(form_text=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_telegram_yes_accessory")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_telegram_no_accessory")]
    ])
    await message.answer(
        f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{message.text}\n–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–≤—è–∑–∏?",
        reply_markup=keyboard
    )
    await state.set_state(SellAccessoryStates.confirm_telegram)

@dp.callback_query(lambda c: c.data in ["add_telegram_yes_accessory", "add_telegram_no_accessory"])
async def handle_telegram_add_accessory(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    form_text = data["form_text"]
    telegram_username = callback_query.from_user.username
    if callback_query.data == "add_telegram_yes_accessory" and telegram_username:
        form_text += f"\n–¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ–¥–∞–≤—Ü–∞: @{telegram_username}"
    await state.update_data(form_text=form_text,
                            telegram_username=telegram_username if callback_query.data.startswith("add_telegram_yes") else None)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_photo_yes_accessory")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_photo_no_accessory")]
    ])
    await callback_query.message.answer(f"{form_text}\n\n–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=keyboard)
    await state.set_state(SellAccessoryStates.waiting_for_photo)

@dp.callback_query(lambda c: c.data in ["add_photo_yes_accessory", "add_photo_no_accessory"])
async def handle_photo_option_accessory(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "add_photo_yes_accessory":
        await callback_query.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ üëá")
    else:
        await save_to_database(callback_query, state, photo_url=None, tip_tovara="–ê–∫—Å–µ—Å—É–∞—Ä")
        await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚úÖ")
        await state.clear()

@router.message(SellAccessoryStates.waiting_for_photo)
async def receive_photo_accessory(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return
    data = await state.get_data()
    photos = data.get("photos", [])
    photo = message.photo[-1]
    photos.append(photo.file_id)
    await state.update_data(photos=photos)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_uploading_photos_accessory")]
    ])
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "finish_uploading_photos_accessory")
async def finish_photo_upload_accessory(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photo_urls = ",".join(photos) if photos else None
    await save_to_database(callback_query, state, photo_urls, tip_tovara="–ê–∫—Å–µ—Å—É–∞—Ä")
    await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
    await state.clear()

class SellHouseStates(StatesGroup):
    waiting_for_form = State()
    confirm_telegram = State()
    waiting_for_photo = State()

@dp.callback_query(lambda c: c.data == "sell_house")
async def start_sell_house(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–¥–∞—Ç—å –¥–æ–º!\n"
        "–ó–∞–ø–æ–ª–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º—É:\n"
        "1. –ê–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω:\n"
        "2. –û–ø–∏—Å–∞–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–ª–æ—â–∞–¥—å):\n"
        "3. –¶–µ–Ω–∞:\n"
        "4. –ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è 10\n"
        "2. 3 –∫–æ–º–Ω–∞—Ç—ã, —Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç, 80 –∫–≤.–º.\n"
        "3. 15.000.000\n"
        "4. —Ç–µ–ª. 987654321"
    )
    await state.set_state(SellHouseStates.waiting_for_form)

@router.message(SellHouseStates.waiting_for_form)
async def receive_form_house(message: Message, state: FSMContext):
    await state.update_data(form_text=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_telegram_yes_house")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_telegram_no_house")]
    ])
    await message.answer(
        f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{message.text}\n–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏?",
        reply_markup=keyboard
    )
    await state.set_state(SellHouseStates.confirm_telegram)

@dp.callback_query(lambda c: c.data in ["add_telegram_yes_house", "add_telegram_no_house"])
async def handle_telegram_add_house(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    form_text = data["form_text"]
    telegram_username = callback_query.from_user.username
    if callback_query.data == "add_telegram_yes_house" and telegram_username:
        form_text += f"\n–¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ–¥–∞–≤—Ü–∞: @{telegram_username}"
    await state.update_data(form_text=form_text,
                            telegram_username=telegram_username if callback_query.data.startswith("add_telegram_yes") else None)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_photo_yes_house")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_photo_no_house")]
    ])
    await callback_query.message.answer(f"{form_text}\n\n–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=keyboard)
    await state.set_state(SellHouseStates.waiting_for_photo)

@dp.callback_query(lambda c: c.data in ["add_photo_yes_house", "add_photo_no_house"])
async def handle_photo_option_house(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "add_photo_yes_house":
        await callback_query.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ üëá")
    else:
        await save_to_database(callback_query, state, photo_url=None, tip_tovara="–î–æ–º")
        await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚úÖ")
        await state.clear()

@router.message(SellHouseStates.waiting_for_photo)
async def receive_photo_house(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return
    data = await state.get_data()
    photos = data.get("photos", [])
    photo = message.photo[-1]
    photos.append(photo.file_id)
    await state.update_data(photos=photos)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_uploading_photos_house")]
    ])
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "finish_uploading_photos_house")
async def finish_photo_upload_house(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photo_urls = ",".join(photos) if photos else None
    await save_to_database(callback_query, state, photo_urls, tip_tovara="–î–æ–º")
    await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
    await state.clear()

class SellBusinessStates(StatesGroup):
    waiting_for_form = State()
    confirm_telegram = State()
    waiting_for_photo = State()

@dp.callback_query(lambda c: c.data == "sell_business")
async def start_sell_business(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å!\n"
        "–ó–∞–ø–æ–ª–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º—É:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ –æ—Ç—Ä–∞—Å–ª—å:\n"
        "2. –û–ø–∏—Å–∞–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞):\n"
        "3. –¶–µ–Ω–∞:\n"
        "4. –ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –ö–∞—Ñ–µ \"–°–æ–ª–Ω–µ—á–Ω—ã–π –±–µ—Ä–µ–≥\"\n"
        "2. –û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—É—Ä–∞\n"
        "3. 2.500.000\n"
        "4. —Ç–µ–ª. 5551234"
    )
    await state.set_state(SellBusinessStates.waiting_for_form)

@router.message(SellBusinessStates.waiting_for_form)
async def receive_form_business(message: Message, state: FSMContext):
    await state.update_data(form_text=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_telegram_yes_business")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_telegram_no_business")]
    ])
    await message.answer(
        f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{message.text}\n–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏?",
        reply_markup=keyboard
    )
    await state.set_state(SellBusinessStates.confirm_telegram)

@dp.callback_query(lambda c: c.data in ["add_telegram_yes_business", "add_telegram_no_business"])
async def handle_telegram_add_business(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    form_text = data["form_text"]
    telegram_username = callback_query.from_user.username
    if callback_query.data == "add_telegram_yes_business" and telegram_username:
        form_text += f"\n–¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ–¥–∞–≤—Ü–∞: @{telegram_username}"
    await state.update_data(form_text=form_text,
                            telegram_username=telegram_username if callback_query.data.startswith("add_telegram_yes") else None)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_photo_yes_business")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_photo_no_business")]
    ])
    await callback_query.message.answer(f"{form_text}\n\n–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=keyboard)
    await state.set_state(SellBusinessStates.waiting_for_photo)

@dp.callback_query(lambda c: c.data in ["add_photo_yes_business", "add_photo_no_business"])
async def handle_photo_option_business(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "add_photo_yes_business":
        await callback_query.message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ üëá")
    else:
        await save_to_database(callback_query, state, photo_url=None, tip_tovara="–ë–∏–∑–Ω–µ—Å")
        await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚úÖ")
        await state.clear()

@router.message(SellBusinessStates.waiting_for_photo)
async def receive_photo_business(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return
    data = await state.get_data()
    photos = data.get("photos", [])
    photo = message.photo[-1]
    photos.append(photo.file_id)
    await state.update_data(photos=photos)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_uploading_photos_business")]
    ])
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "finish_uploading_photos_business")
async def finish_photo_upload_business(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photo_urls = ",".join(photos) if photos else None
    await save_to_database(callback_query, state, photo_urls, tip_tovara="–ë–∏–∑–Ω–µ—Å")
    await callback_query.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
    await state.clear()


async def save_to_database(message_or_cb, state: FSMContext, photo_url, tip_tovara="–ê–≤—Ç–æ"):
    data = await state.get_data()
    telegram_id = message_or_cb.from_user.id
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()

    cursor.execute("SELECT server FROM Users WHERE telegram_id = ?", (telegram_id,))
    server_row = cursor.fetchone()
    server = server_row[0] if server_row else None

    cursor.execute("""
        INSERT INTO Obyavy (telegram_id, vid, tip_tovara, opisanie, tsena, foto_sylka, telegram_user_name, server)
        VALUES (?, '–ü—Ä–æ–¥–∞–∂–∞', ?, ?, ?, ?, ?, ?)
    """, (
        telegram_id,
        tip_tovara,
        data['form_text'],
        0.0,  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É
        photo_url or "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ",
        data.get("telegram_username"),
        server
    ))
    conn.commit()

    cursor.execute("SELECT * FROM Obyavy WHERE telegram_id = ? ORDER BY id DESC LIMIT 1", (telegram_id,))
    last_ad = cursor.fetchone()
    conn.close()

    ad_text = (
        f"üì£ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {last_ad[9]}\n"
        f"üîÑ –¢–∏–ø —Å–¥–µ–ª–∫–∏: {last_ad[2]}\n"
        f"üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {last_ad[3]}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {last_ad[4]}\n"
    )

    if isinstance(message_or_cb, CallbackQuery):
        msg = message_or_cb.message
    else:
        msg = message_or_cb

    if last_ad[6] and last_ad[6] != "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ":
        photos = last_ad[6].split(",")
        if len(photos) == 1:
            await msg.answer_photo(photo=photos[0], caption=ad_text)
        else:
            from aiogram.types import InputMediaPhoto
            media = [InputMediaPhoto(media=photos[0], caption=ad_text)]
            media += [InputMediaPhoto(media=photo) for photo in photos[1:]]
            await msg.answer_media_group(media)
    else:
        await msg.answer(f"{ad_text}\nüñºÔ∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ")

@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def handle_buy_action(callback_query: CallbackQuery):
    mapping = {
        "buy_auto": "–ê–≤—Ç–æ",
        "buy_accessory": "–ê–∫—Å–µ—Å—É–∞—Ä",
        "buy_house": "–î–æ–º",
        "buy_business": "–ë–∏–∑–Ω–µ—Å"
    }
    key = callback_query.data
    if key not in mapping:
        await callback_query.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚ùó", show_alert=True)
        return

    selected_tip = mapping[key]
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT server FROM Users WHERE telegram_id = ?", (telegram_id,))
    user_row = cursor.fetchone()
    if not user_row:
        conn.close()
        await callback_query.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
        return
    user_server = user_row[0]

    # –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º —Ç–∏–ø–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
    cursor.execute(
        "SELECT id, tip_tovara, opisanie, foto_sylka FROM Obyavy WHERE server = ? AND tip_tovara = ?",
        (user_server, selected_tip)
    )
    ads = cursor.fetchall()
    conn.close()

    if not ads:
        await callback_query.message.answer("üôÅ –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ üò¢")
        await callback_query.answer()
        return

    for ad in ads:
        ad_id, tip, opisanie, foto_sylka = ad
        text = (
            f"üîî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ üîî\n\n"
            f"üíº –¢–∏–ø: {tip}\n"
            f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {user_server}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {opisanie}\n"
            f"üÜî ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad_id}\n\n"
            f"üî• –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å! üî•"
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ñ–∞–ª–æ–±–∞"
        complain_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö© –ñ–∞–ª–æ–±–∞", callback_data=f"complain_{ad_id}")]
        ])

        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π,
        # –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if foto_sylka and foto_sylka != "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ":
            photos = foto_sylka.split(",")
            if len(photos) == 1:
                await callback_query.message.answer_photo(photo=photos[0], caption=text, reply_markup=complain_kb)
            else:
                from aiogram.types import InputMediaPhoto
                media = [InputMediaPhoto(media=photos[0], caption=text)]
                media += [InputMediaPhoto(media=p) for p in photos[1:]]
                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ –Ω–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback_query.message.answer_media_group(media)
                await callback_query.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è:", reply_markup=complain_kb)
        else:
            await callback_query.message.answer(text, reply_markup=complain_kb)
    await callback_query.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("complain_"))
async def handle_complaint(callback_query: CallbackQuery):
    try:
        ad_id = int(callback_query.data.split("_")[1])
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return

    conn = sqlite3.connect('ravito-bot.db')
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    cursor.execute("SELECT zhaloby, opisanie FROM Obyavy WHERE id = ?", (ad_id,))
    row = cursor.fetchone()
    if not row:
        conn.close()
        await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    current_zhaloby, opisanie = row
    new_zhaloby = current_zhaloby + 1

    if new_zhaloby >= 5:
        # –ï—Å–ª–∏ –∂–∞–ª–æ–± –ø—è—Ç—å –∏ –±–æ–ª–µ–µ ‚Äì —É–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        cursor.execute("DELETE FROM Obyavy WHERE id = ?", (ad_id,))
        conn.commit()
        conn.close()
        await callback_query.answer("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±!", show_alert=True)
        try:
            await callback_query.message.edit_text("–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±.")
        except Exception:
            pass
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç—å, –≥–¥–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±.
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω–µ—Ü.
        new_opisanie = f"{opisanie} | –ñ–∞–ª–æ–±—ã –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {new_zhaloby}"
        cursor.execute("UPDATE Obyavy SET zhaloby = ?, opisanie = ? WHERE id = ?", (new_zhaloby, new_opisanie, ad_id))
        conn.commit()
        conn.close()
        await callback_query.answer(f"üö© –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ñ–∞–ª–æ–±: {new_zhaloby}", show_alert=True)
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ edit_message_caption)


async def main():
    logging.basicConfig(level=logging.INFO)
    dp.include_router(router)
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())
